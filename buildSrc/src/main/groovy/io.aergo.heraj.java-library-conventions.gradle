/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    // Apply the common convention plugin for shared build configuration between library and application projects.
    id 'io.aergo.heraj.java-common-conventions'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'checkstyle'
    id 'maven-publish'           // maven
    id 'signing'                 //
    id "me.champeau.jmh" // micro bmt
}

def projectBaseName = 'heraj-' + project.name

// test configuration
test {
  if (java.toolchain.languageVersion.get().canCompileOrRun(JavaLanguageVersion.of("9"))) {
    jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.math=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.nio=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.util=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.util.stream=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.io=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.xml/jdk.xml.internal=ALL-UNNAMED')
  }

  maxParallelForks = Math.max(1, Runtime.runtime.availableProcessors())
  exclude '**/*Tests.class'
  exclude '**/*IT.class'
}

task integrationTest(type: Test) {
  if (java.toolchain.languageVersion.get().canCompileOrRun(JavaLanguageVersion.of("10"))) {
    jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.math=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.nio=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.util=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.util.stream=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.io=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.xml/jdk.xml.internal=ALL-UNNAMED')
  }

  // note that every *IT class must have own wallet
  maxParallelForks = Math.max(1, Runtime.runtime.availableProcessors())
  include '**/*IT.class'
}

//  tasks.withType(Sign) {
//      onlyIf { isReleaseVersion }
//  }

dependencies {
  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
  runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"

  testImplementation "org.projectlombok:lombok:${lombokVersion}"
  testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  testImplementation "junit:junit:${junitVersion}"
  testImplementation "org.mockito:mockito-core:${mockitoVersion}"
  testImplementation("org.powermock:powermock-api-mockito2:${powerMockVersion}") {
    exclude group: 'org.mockito', module: 'mockito-core'
  }
  testImplementation "org.powermock:powermock-module-junit4:${powerMockVersion}"
}


/* checkstyle */

checkstyle {
  toolVersion checkstyleVersion
  sourceSets = [project.sourceSets.main]
  configFile = file("${project.rootProject.projectDir}/styles.xml")
}

task lint {
  dependsOn check
}


/* jacoco */

jacoco {
  toolVersion jacocoVersion
}

// need test task before executing
jacocoTestReport {
  group = "Reporting"
  dependsOn test // tests are required to run before generating the report

  getAdditionalSourceDirs().setFrom(sourceSets.main.allSource.srcDirs)
  getSourceDirectories().setFrom(sourceSets.main.allSource.srcDirs)
  getClassDirectories().setFrom(sourceSets.main.output.classesDirs)
  reports {
    xml.required = true
    html.required = true
  }
}

task coverage {
  dependsOn jacocoTestReport
}


jar {
  archivesBaseName = projectBaseName
}


/* jmh */
jmh {
  fork = 2
  benchmarkMode = ['thrpt']
  resultFormat = 'JSON'
  timeUnit = 's'
  threads = 2 * Runtime.runtime.availableProcessors()
//    jmhVersion = '1.21'
  duplicateClassesStrategy = org.gradle.api.file.DuplicatesStrategy.WARN
}
